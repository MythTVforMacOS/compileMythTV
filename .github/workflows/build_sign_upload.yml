# yamllint disable rule:line-length
---
name: "Reusable WF: Build Sign and Upload Mythfrontend"

on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      MYTHBRANCH:
        required: true
        type: string
      USE_CCACHE:
        required: false
        type: boolean
        default: true
jobs:
  build:
    name: Building MythTV on ${{ matrix.os.desc }} using ${{ matrix.compiler.desc }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - desc: 'macOS 13 (Ventura) x86_64'
            runner: 'macOS-13'
            arch: 'x86_64'
            cross_compile: false
          - desc: 'macOS 14 (Sonoma) arm64'
            runner: 'macOS-14'
            arch: 'arm64'
            cross_compile: false
          - desc: 'macOS 15 (Sequoia) arm64'
            runner: 'macOS-15'
            arch: 'arm64'
            cross_compile: false
    runs-on: ${{ matrix.os.runner }}
    env:
      MASTER_VERS: 36
      DBVERS: "mariadb"
      QTVERS: "qt@6"
      NOTAR_KEYCHAIN: "notary"
      ARCH: ${{ matrix.os.arch }}
      MYTHBRANCH: ${{ inputs.MYTHBRANCH }}
      USE_CCACHE: ${{ inputs.USE_CCACHE }}
    steps:
      - uses: actions/checkout@master
      - name: "Setup environemental variables"
        run: |
          # create place to store generated DMG files
          DMG_OUT_DIR="${GITHUB_WORKSPACE}/output_dir"
          echo "DMG_OUT_DIR=${DMG_OUT_DIR}" >> $GITHUB_ENV
          mkdir -p $DMG_OUT_DIR
          # note the code sigining ID needs to be passed in later
          # as its a secret variable
          BLD_FLGS="--working_dir=${GITHUB_WORKSPACE} \
            --version=${MYTHBRANCH} \
            --qt-version=${QTVERS} \
            --frontend-bundle=ON \
            --generate-distribution=true \
            --signing-id=\"${{ vars.PROD_MACOS_CERTIFICATE_NAME }}\" \
            --notarization-keychain=${NOTAR_KEYCHAIN} \
            --skip-ansible=true \
            --update-git=false"
          echo "BLD_FLGS=${BLD_FLGS}" >> $GITHUB_ENV
          case $MYTHBRANCH in
            *fixes*)
              VERSNUM=${MYTHBRANCH#*/}
            ;;
            *master*)
              VERSNUM=${MASTER_VERS}
            ;;
            *)
              echo "Bad MYTHVERS"
              exit 1
            ;;
          esac
          echo "VERSNUM=$VERSNUM" >> $GITHUB_ENV
          OS_VERS="$(sw_vers -productVersion | awk -F '.' '{print $1}')"
          echo "OS_VERS=$OS_VERS" >> $GITHUB_ENV
      - name: "Checkout MythTV/ansible repository"
        uses: actions/checkout@v4
        with:
          repository: MythTV/ansible
          path: ansible
      - name: "Install Homebrew Packages"
        uses: ./.github/actions/installBrewPackages
        id: installHB
        with:
          ARCH: ${{ matrix.os.arch }}
          CROSS_COMPILE: ${{ matrix.os.cross_compile }}
          DBVERS: ${{ env.DBVERS }}
          QTVERS: ${{ env.QTVERS }}
      - name: Checkout Mythtv/mythtv repository
        uses: actions/checkout@v4
        with:
          repository: MythTV/mythtv
          ref: ${{ env.MYTHBRANCH }}
          path: "mythtv-${{ env.VERSNUM }}/mythtv"
      - name: "Setup Signing Keychain"
        uses: ./.github/actions/setup_signing
        id: signing
        with:
          CERT: ${{ secrets.PROD_MACOS_CERTIFICATE }}
          CERT_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
          CI_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
          APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          NOTAR_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
          NOTAR_KEYCHAIN: ${{ env.NOTAR_KEYCHAIN }}
      - name: "Compile, Sign, and Notarize MythTV"
        uses: ./.github/actions/compile
        id: compile_sign_notarize
        with:
          DMG_OUT_DIR: ${{ env.DMG_OUT_DIR }}
          OS: ${{ matrix.os.runner }}
          ARCH: ${{ matrix.os.arch }}
          CROSS_COMPILE: ${{ matrix.os.cross_compile }}
          VERSNUM: ${{ env.VERSNUM }}
          BLD_FLGS: ${{ env.BLD_FLGS }}
          USE_CCACHE: ${{ env.USE_CCACHE }}
          CI_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
      - uses: webfactory/ssh-agent@master
        with:
          ssh-private-key: ${{ secrets.SF_PRIV_KEY }}
      - name: "Upload to SourceForge"
        uses: ./.github/actions/upload
        id: upload
        with:
          DMG_W: ${{ env.DMG_W }}
          DMG_WO: ${{ env.DMG_WO }}
          VERSNUM: ${{ env.VERSNUM }}
          OS_VERS: ${{ env.OS_VERS }}
          ARCH: ${{ matrix.os.arch }}
          PKGMGR: homebrew
          SF_LOGIN: ${{ secrets.SF_LOGIN }}
