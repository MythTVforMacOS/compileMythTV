# yamllint disable rule:line-length
---
name: "Reusable WF: Build Sign and Upload Mythfrontend"

on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      MYTHBRANCH:
        required: true
        type: string
      USE_CCACHE:
        required: false
        type: boolean
        default: true
      BUILDTYPE:
        required: false
        type: string
        default: production
      ARCHITECTURE:
        required: false
        type: string
        default: arm64
      PKGMGR:
        required: false
        type: string
        default: homebrew
jobs:
  init:
    name: Initialize Run Matrix
    runs-on: macOS-latest
    env:
      ARM64_RUNNERS: 'macOS-14,macOS-15'
      #ARM64_RUNNERS: 'macOS-14,macOS-15,macOS-26'
      X86_64_RUNNERS: 'macOS-13,macOS-14-large'
      #X86_64_RUNNERS: 'macOS-14-large,macOS-15-large'
    outputs:
      RUNNER: ${{ steps.generate-matrix.outputs.RUNNER }}
    steps:
      - name: generate-matrix
        id: generate-matrix
        run: |
          arch=""
          cross_compile=""
          if [ "${{ inputs.ARCHITECTURE }}" == "all" ]; then
            echo "Adding all runners."
            RUNNER=${{ env.ARM64_RUNNERS }},${{ env.X86_64_RUNNERS }}
          elif [ "${{ inputs.ARCHITECTURE }}" == "arm64" ]; then
            echo "Adding arm64 runners."
            RUNNER=${{ env.ARM64_RUNNERS }}
          elif [ "${{ inputs.ARCHITECTURE }}" == "x86_64" ]; then
            echo "Adding x86_64 runners."
            RUNNER=${{ env.X86_64_RUNNERS }}
          fi
          echo pre-split $RUNNER
          JSON_MATRIX=$(jq --null-input --arg str "$RUNNER" '$str | split(",")')
          echo JSON_MATRIX-$JSON_MATRIX
          #echo "RUNNER=$JSON_MATRIX" >> '$GITHUB_OUTPUT'
          echo "RUNNER=$(jq -cr '@json' <<< "$JSON_MATRIX")" >> $GITHUB_OUTPUT
  build:
    needs: init
    name: Building MythTV on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.init.outputs.RUNNER) }}
    runs-on: ${{ matrix.os }}
    env:
      MASTER_VERS: 36
      NOTAR_KEYCHAIN: "notary"
      MYTHBRANCH: ${{ inputs.MYTHBRANCH }}
      USE_CCACHE: ${{ inputs.USE_CCACHE }}
    steps:
      - name: "Check Architecture"
        id: check_arch
        run: |
          case ${{ matrix.os }} in
            'macOS-14'|'macOS-15'|'macOS-26')
              ARCH='arm64'
              OS=${{ matrix.os }}
            ;;
            'macOS-13'|'macOS-14-large'|'macOS-15-large')
              ARCH='x86_64'
              OS=${${{ matrix.os }}%"-large"}
            ;;
            *)
              echo "Architecture detection failure"
              exit 1
            ;;
          esac
          echo "ARCH=${ARCH}" >> $GITHUB_ENV
          echo "OS=${OS}" >> $GITHUB_ENV
      - uses: actions/checkout@master
      - name: "Setup environemental variables"
        run: |
          # create place to store generated DMG files
          DMG_OUT_DIR="${GITHUB_WORKSPACE}/output_dir"
          echo "DMG_OUT_DIR=${DMG_OUT_DIR}" >> $GITHUB_ENV
          mkdir -p $DMG_OUT_DIR
          # note the code sigining ID needs to be passed in later
          # as its a secret variable
          BLD_FLGS="--working_dir=${GITHUB_WORKSPACE} \
            --version=${MYTHBRANCH} \
            --frontend-bundle=ON \
            --generate-distribution=true \
            --signing-id=\"${{ vars.PROD_MACOS_CERTIFICATE_NAME }}\" \
            --notarization-keychain=${NOTAR_KEYCHAIN} \
            --skip-ansible=true \
            --update-git=false"
          echo "BLD_FLGS=${BLD_FLGS}" >> $GITHUB_ENV
          case $MYTHBRANCH in
            *fixes*)
              VERSNUM=${MYTHBRANCH#*/}
            ;;
            *master*)
              VERSNUM=${MASTER_VERS}
            ;;
            *)
              echo "Bad MYTHVERS"
              exit 1
            ;;
          esac
          echo "VERSNUM=$VERSNUM" >> $GITHUB_ENV
          OS_VERS="$(sw_vers -productVersion | awk -F '.' '{print $1}')"
          case $OS_VERS in
            13)
              OS_NAME="Ventura"
            ;;
            14)
              OS_NAME="Sonoma"
            ;;
            15)
              OS_NAME="Sequoia"
            ;;
            24)
              OS_NAME="Tahoe"
            ;;
            *)
              OS_NAME="$(awk '/SOFTWARE LICENSE AGREEMENT FOR macOS/' '/System/Library/CoreServices/Setup Assistant.app/Contents/Resources/en.lproj/OSXSoftwareLicense.rtf' | awk -F 'macOS ' '{print $NF}' | awk '{print substr($0, 0, length($0)-1)}')"
            ;;
          esac
          echo "OS_VERS=$OS_VERS" >> $GITHUB_ENV
          echo "OS_NAME=$OS_NAME" >> $GITHUB_ENV
      - name: "Checkout MythTV/ansible repository"
        uses: actions/checkout@v4
        with:
          repository: MythTV/ansible
          path: ansible
      - name: "Install Homebrew Packages"
        if: inputs.PKGMGR == 'homebrew'
        uses: ./.github/actions/installBrewPackages
        id: installHB
        with:
          ARCH: ${{ env.ARCH }}
          CROSS_COMPILE: false
          DBVERS: mariadb
      - name: "Install MacPorts Packages"
        if: inputs.PKGMGR == 'macports'
        uses: ./.github/actions/installPorts
        id: installPorts
        with:
          ARCH: ${{ env.ARCH }}
          CROSS_COMPILE: false
          DBVERS: mysql8
      - name: Checkout Mythtv/mythtv repository
        uses: actions/checkout@v4
        with:
          repository: MythTV/mythtv
          ref: ${{ env.MYTHBRANCH }}
          path: "mythtv-${{ env.VERSNUM }}/mythtv"
      - name: "Setup Signing Keychain"
        uses: ./.github/actions/setup_signing
        id: signing
        with:
          CERT: ${{ secrets.PROD_MACOS_CERTIFICATE }}
          CERT_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
          CI_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
          APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          NOTAR_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
          NOTAR_KEYCHAIN: ${{ env.NOTAR_KEYCHAIN }}
      - name: "Compile, Sign, and Notarize MythTV"
        uses: ./.github/actions/compile
        id: compile_sign_notarize
        with:
          DMG_OUT_DIR: ${{ env.DMG_OUT_DIR }}
          OS: ${{ env.OS }}
          ARCH: ${{ env.ARCH }}
          CROSS_COMPILE: false
          VERSNUM: ${{ env.VERSNUM }}
          BLD_FLGS: ${{ env.BLD_FLGS }}
          USE_CCACHE: ${{ env.USE_CCACHE }}
          CI_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
      - name: "Generate Upload Variables"
        id: upload_prep
        shell: bash
        run: |
          # setup destination folders
          echo "Generating Upload Paths"
          SF_PATH="/home/frs/project/m/my/mythtvformacosx"
          case ${{ inputs.BUILDTYPE }} in
            *test*)
              SF_PATH="$SF_PATH/test_builds"
            ;;
            *)
              SF_PATH="$SF_PATH/v$VERSNUM/macOS $OS_VERS $OS_NAME"
            ;;
          esac
          UPLDLABEL="MythFrontend-${ARCH}-macOS${OS_VERS}-v${VERSNUM}"
          DEST_W="frs.sourceforge.net:${SF_PATH}/$UPLDLABEL-with-plugins.dmg"
          DEST_WO="frs.sourceforge.net:${SF_PATH}/$UPLDLABEL.dmg"
          echo "DEST_W=${DEST_W}" >> $GITHUB_ENV
          echo "DEST_WO=${DEST_WO}" >> $GITHUB_ENV
      - name: "Upload to SourceForge"
        uses: ./.github/actions/upload
        id: upload
        with:
          SF_PRIV_KEY: ${{ secrets.SF_PRIV_KEY }}
          DMG_W: ${{ env.DMG_W }}
          DMG_WO: ${{ env.DMG_WO }}
          DEST_W: ${{ env.DEST_W }}
          DEST_WO: ${{ env.DEST_WO }}
          SF_LOGIN: ${{ secrets.SF_LOGIN }}
