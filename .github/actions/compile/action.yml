# yamllint disable rule:line-length
---
name: "Compile MythTV"
inputs:
  DMG_OUT_DIR:
    required: true
    type: string
  OS:
    require: true
    type: string
  ARCH:
    require: true
    type: string
  CROSS_COMPILE:
    required: true
    type: boolean
  VERSNUM:
    require: true
    type: string
  BLD_FLGS:
    required: true
    type: string
  USE_CCACHE:
    required: false
    type: boolean
    default: false
  CI_PWD:
    require: true
    type: string
runs:
  using: "composite"
  steps:
    - name: "Setup Build Environment Variables"
      id: setup_env
      shell: bash
      run: |
        # setup Environment variables
        DMG=${GITHUB_WORKSPACE}/mythtv-${{ inputs.VERSNUM }}/cpack_output/mythfrontend.dmg
        echo "DMG=$DMG" >> $GITHUB_ENV
        ZSH_CMD="arch -${ARCH} /bin/zsh"
        echo "ZSH_CMD=$ZSH_CMD" >> $GITHUB_ENV
        echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
        CCACHE_STORE=${{ inputs.VERSNUM }}-${{ inputs.OS }}-${{ inputs.ARCH }}
        echo "CCACHE_STORE=$CCACHE_STORE" >> $GITHUB_ENV
    - name: "Setup Cross-Compile"
      id: crosscompile
      if: ${{ inputs.CROSS_COMPILE == 'true' }}
      shell: bash
      run: |
        CX_CMD="arch -${{ inputs.ARCH }}"
        ZSH_CMD="$CX_CMD /bin/zsh"
        echo "ZSH_CMD=$ZSH_CMD" >> $GITHUB_ENV
    - name: Check ccache
      id: setup_ccache
      if: ${{ inputs.USE_CCACHE == 'true' }}
      uses: actions/cache@master
      with:
        path: ${{ env.CCACHE_DIR }}
        key: mythtv-ccache-${CCACHE_STORE}-${{ github.sha }}
        restore-keys: ${CCACHE_STORE}-
    - name: "Build MythTV with Plugins"
      id: build_with
      shell: bash
      run: |
        # First build with plugins
        export CCACHE_DIR=${CCACHE_DIR}
        /usr/bin/security unlock-keychain
        security unlock-keychain -p "${{ inputs.CI_PWD }}" build.keychain
        ${ZSH_CMD} ./compileMythtvAnsible_cmake.zsh ${{ inputs.BLD_FLGS }} --build-plugins=true
        echo "compile complete, copying into ${{ inputs.DMG_OUT_DIR }}"
        mv ${DMG} "${{ inputs.DMG_OUT_DIR }}/mythfrontend_with.dmg"
    - name: "Re-Build MythTV without Plugins"
      id: build_wo
      shell: bash
      run: |
        # Now make it without plugins
        /usr/bin/security unlock-keychain
        security unlock-keychain -p "${{ inputs.CI_PWD }}" build.keychain
        ${ZSH_CMD} ./compileMythtvAnsible_cmake.zsh ${{ inputs.BLD_FLGS }} --build-plugins=false --repackage-only=true
        echo "compile complete, copying into ${{ inputs.DMG_OUT_DIR }}"
        mv ${DMG} "${{ inputs.DMG_OUT_DIR }}/mythfrontend_without.dmg"
    - name: "Test Mythfrontend"
      id: test_app
      shell: bash
      env:
        TEST_APP: cpack_output/_CPack_Packages/Darwin/Bundle/mythfrontend/mythfrontend.app/Contents/MacOS/mythfrontend
      run: |
        echo "Testing mythfrontend.app"
        EXE="${GITHUB_WORKSPACE}/mythtv-${{ inputs.VERSNUM }}/${TEST_APP} --version"
        VERSTR=$($EXE |grep "MythTV Version"|gsed "s/^.*Version : *//")
        echo "Extracted Version String: $VERSTR"
        echo "VERSTR=$VERSTR" >> $GITHUB_ENV
    - name: "Prepare for Upload"
      id: upload_prep
      shell: bash
      run: |
        echo "Creating output DMG names"
        cd ${{ inputs.DMG_OUT_DIR }}
        DMG_W="${{ inputs.DMG_OUT_DIR }}/MythFrontend-${ARCH}-$OS_VERS-macOS$VERSTR-with-plugins.dmg"
        DMG_WO="${{ inputs.DMG_OUT_DIR }}/MythFrontend-${ARCH}-$OS_VERS-macOS$VERSTR.dmg"
        # rename the already generated DMG files
        mv mythfrontend_with.dmg $DMG_W
        mv mythfrontend_without.dmg $DMG_WO
        echo "DMG_W=$DMG_W" >> $GITHUB_ENV
        echo "DMG_WO=$DMG_WO" >> $GITHUB_ENV
    - uses: actions/cache/save@master
      id: ccache_save
      if: ${{ steps.build_with.outcome == 'success' && inputs.USE_CCACHE == 'true' }}
      with:
        path: ${{ env.CCACHE_DIR }}
        key: mythtv-ccache-${CCACHE_STORE}-${{ github.sha }}
