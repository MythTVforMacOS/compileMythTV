# yamllint disable rule:line-length
---
name: "Install Packages vi Homebrew"
inputs:
  ARCH:
    required: true
    type: string
  CROSS_COMPILE:
    required: true
    type: boolean
  DBVERS:
    required: true
    type: string
  QTVERS:
    required: true
    type: string
runs:
  using: "composite"
  steps:
    - name: "Remove formula for a fresh homebrew install"
      id: reset_brew
      if: ${{ inputs.VERSNUM > 13 || inputs.CROSS_COMPILE == 'true' }}
      shell: bash
      run: |
        echo "Removing all previously install formula"
        brew remove --cask --force $(brew list)
        brew remove --force $(brew list --formula)
    - name: "Setup Homebre Environmental Variables"
      id: setup_brew_vars
      if: ${{ inputs.CROSS_COMPILE != 'true' }}
      shell: bash
      run: |
        PKGMGR_PREFIX=$(brew --prefix)
        PKGMGR_CMD="$PKGMGR_PREFIX/bin/brew"
        echo "PKGMGR_PREFIX=$PKGMGR_PREFIX" >> $GITHUB_ENV
        echo "PKGMGR_CMD=$PKGMGR_CMD" >> $GITHUB_ENV
        ANS_PB="${PKGMGR_PREFIX}/opt/ansible/bin/ansible-playbook"
        echo "ANS_PB=$ANS_PB" >> $GITHUB_ENV
        #if [ ${{ env.OS_VERS }} > 13 ];then
        #  echo "Updating homebrew"
        #  ${PKGMGR_CMD} update
        #fi
  #  - name: "Corss-Compile: Remove and reinstall homebrew install"
  #    id: setup_brew_cross_compile
  #    if: ${{ inputs.CROSS_COMPILE == 'true' }}
  #    shell: bash
  #    env:
  #      GH_URL: "https://raw.githubusercontent.com"
  #      HB_RM_URL: "Homebrew/install/HEAD/uninstall.sh"
  #      HB_INST_URL: "Homebrew/install/HEAD/install.sh"
  #    run: |
  #      if hash brew 2>/dev/null; then
  #        # now remove homebrew to prevent python conflicts
  #        /bin/bash -c "$(curl -fsSL ${GH_URL}/${HB_RM_URL})" --force
  #        sudo rm -Rf /opt/homebrew
  #      fi
  #      # reinstall homebrew for cross-compile
  #      arch -${{ inputs.ARCH }} /bin/bash -c "$(curl -fsSL ${GH_URL}/${HB_INST_URL})"
  #      CX_CMD="arch -${{ inputs.ARCH }}"
  #      echo "CX_CMD=$CX_CMD" >> $GITHUB_ENV
  #      PKGMGR_CMD="$CX_CMD brew"
  #      PKGMGR_PREFIX=$($PKGMGR_CMD --prefix)
  #      PKGMGR_CMD="$CX_CMD $PKGMGR_PREFIX/bin/brew"
  #      echo "PKGMGR_PREFIX=$PKGMGR_PREFIX" >> $GITHUB_ENV
  #      echo "PKGMGR_CMD=$PKGMGR_CMD" >> $GITHUB_ENV
  #      echo "Updating homebrew"
  #      ${PKGMGR_CMD} update
  #      ANS_PB="$CX_CMD ${PKGMGR_PREFIX}/opt/ansible/bin/ansible-playbook"
  #      echo "ANS_PB=$ANS_PB" >> $GITHUB_ENV
    - name: "Install required support packages"
      id: install_req_packages
      shell: bash
      run: |
        PKGMGR_BIN=$PKGMGR_PREFIX/bin
        echo "PKGMGR_BIN=$PKGMGR_BIN" >> $GITHUB_ENV
        export PATH=$PATH:$PKGMGR_BIN
        #if [ ${{ env.OS_VERS }} <= 13 ]; then
        #  export HOMEBREW_NO_AUTO_UPDATE=1
        #fi
        echo "Installing python support packages"
        ${PKGMGR_CMD} install python-setuptools python-packaging
        ${PKGMGR_CMD} link python-setuptools
        ${PKGMGR_CMD} link python-packaging
        echo "Installing ansible"
        ${PKGMGR_CMD} install --force --overwrite ansible
    - name: "Install required packages via ansible"
      id: ansible_install
      shell: bash
      run: |
        cd ansible
        echo "Installing packages via ansible playbook"
        XTRA_VARS="database_version=${{ inputs.DBVERS }}"
        if [ ${{ inputs.QTVERS }} == "qt@5" ] || [ ${{ inputs.QTVERS }} == "qt5" ]; then
          XTRA_VARS="$XTRA_VARS qt5=true"
        fi
        echo "Running ansible"
        ANSIBLE_BECOME=false ANSIBLE_BECOME_ASK_PASS=False ${ANS_PB} mythtv.yml --extra-vars="$XTRA_VARS" --limit=localhost
        ${PKGMGR_CMD}  unlink qt
        ${PKGMGR_CMD}  link qt
    - name: Fix the HDHomeRun library on ARM64
      shell: bash
      run: ln -s $PKGMGR_PREFIX/opt/libhdhomerun/lib/libhdhomerun.dylib $PKGMGR_PREFIX/opt/libhdhomerun/lib/libhdhomerun_arm64.dylib
      if: ${{ inputs.ARCH == 'arm64' }}
    - name: Fix the HDHomeRun library on x86_64
      shell: bash
      run: ln -s $PKGMGR_PREFIX/opt/libhdhomerun/lib/libhdhomerun.dylib $PKGMGR_PREFIX/opt/libhdhomerun/lib/libhdhomerun_x64.dylib
      if: ${{ inputs.ARCH == 'x86_64' }}
    - name: "Cleanup homebrew install"
      id: homebrew_cleanup
      shell: bash
      run: |
        echo "Cleaning up homebrew builds"
        # force ownership for the users ansible / mythtv temp directories
        sudo chown $(id -u):$(id -g) ~/.ansible
        sudo chown $(id -u):$(id -g) ~/.virtualenvs
